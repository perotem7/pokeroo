// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  ONGOING
  COMPLETED
  CANCELLED
}

enum TenantPlan {
  FREE
  PROFESSIONAL
  ENTERPRISE
}

enum UserRole {
  OWNER // Tenant owner/admin
  ADMIN // Tenant admin
  MEMBER // Regular user
}

model Tenant {
  id           String     @id @default(uuid())
  name         String
  subdomain    String     @unique // e.g., 'acme' for acme.pokeroo.com
  customDomain String?    @unique @map("custom_domain") // e.g., 'poker.acme.com'
  plan         TenantPlan @default(FREE)
  settings     Json? // Tenant-specific configuration
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relationships
  users          User[]
  players        Player[]
  pokerEvents    PokerEvent[]
  playerInEvents PlayerInEvent[]

  @@map("tenants")
}

model User {
  id           String   @id @default(uuid())
  username     String // Remove @unique - username unique per tenant
  email        String? // Add email for better user management
  passwordHash String   @map("password_hash")
  role         UserRole @default(MEMBER)
  tenantId     String   @map("tenant_id")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  players Player[] // A user can create multiple players

  @@unique([username, tenantId]) // Username unique per tenant
  @@unique([email, tenantId]) // Email unique per tenant (if used)
  @@index([tenantId])
  @@map("users")
}

model Player {
  id          String   @id @default(uuid())
  name        String
  tenantId    String   @map("tenant_id")
  createdById String   @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy    User            @relation(fields: [createdById], references: [id])
  pokerEvents  PlayerInEvent[] // Events this player participated in
  hostedEvents PokerEvent[] // Events this player hosted

  @@index([tenantId])
  @@index([tenantId, createdById])
  @@map("players")
}

model PokerEvent {
  id        String      @id @default(uuid())
  date      DateTime    @default(now())
  status    EventStatus @default(ONGOING)
  tenantId  String      @map("tenant_id")
  hostId    String      @map("host_id")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relationships
  tenant  Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  host    Player          @relation(fields: [hostId], references: [id])
  players PlayerInEvent[] // Players participating in this event

  @@index([tenantId])
  @@index([tenantId, hostId])
  @@map("poker_events")
}

model PlayerInEvent {
  id            String   @id @default(uuid())
  buyIns        Int      @default(0)
  cashOutAmount Int?     @map("cash_out_amount") // Optional, set when cashing out
  tenantId      String   @map("tenant_id")
  eventId       String   @map("event_id")
  playerId      String   @map("player_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relationships
  tenant Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  event  PokerEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  player Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([eventId, playerId]) // Ensure a player can only be added once per event
  @@index([tenantId])
  @@index([tenantId, eventId])
  @@index([tenantId, playerId])
  @@map("player_in_event")
}
